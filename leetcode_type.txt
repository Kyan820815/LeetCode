--- Binary Search:
	0009(e): Palindrome Number 
	0023(h): Merge k Sorted Lists
	0029(m): Divide Two Integers
	0033(m): Search in Rotated Sorted Array
	0034(m): Find First and Last Position of Element in Sorted Array
	0074(m): Search a 2D Matrix
	0081(m): Search in Rotated Sorted Array II
	0108(e): Convert Sorted Array to Binary Search Tree
	0109(m): Convert Sorted List to Binary Search Tree
	0153(m): Find Minimum in Rotated Sorted Array
	0162(m): Find Peak Element
	0167(e): Two Sum II - Input array is sorted
	0179(m): Largest Number
	0241(m): Different Ways to Add Parentheses
	0278(e): First Bad Version
	0287(m): Find the Duplicate Number
	0300(m): Longest Increasing Subsequence
	0315(h): Count of Smaller Numbers After Self
	0327(h): Count of Range Sum
	0374(e): Guess Number Higher or Lower
	0378(m): Kth Smallest Element in a Sorted Matrix
	0410(h): Split Array Largest Sum
	0493(h): Reverse Pairs
	0497(m): Random Point in Non-overlapping Rectangles
	0528(m): Random Pick with Weight
	0540(m): Single Element in a Sorted Array
	0658(m): Find K Closest Elements
	0704(e): Binary Search
	0852(e): Peak Index in a Mountain Array
	1064(e): Fixed Point
	1150(e): Check If a Number Is Majority Element in a Sorted Array
	1268(m): Search Suggestions System
	1287(e): Element Appearing More Than 25% In Sorted Array
	1292(m): Maximum Side Length of a Square with Sum Less than or Equal to Threshold
	1317(e): The K Weakest Rows in a Matrix
	1385(e): Find the Distance Value Between Two Arrays
	1389(e): Create Target Array in the Given Order

--- Sliding Window, Double Pointer Shifting:
	0001(e): Two Sum
	0003(m): Longest Substring Without Repeating Characters
	0005(m): Longest Palindromic Substring 
	0011(m): Container With Most Water
	0015(m): 3Sum
	0016(m): 3Sum Closest
	0018(m): 4Sum
	0042(m): Trapping Rain Water
	0045(h): Jump Game II
	0055(m): Jump Game
	0076(h): Minimum Window Substring
	0088(e): Merge Sorted Array
	0125(e): Valid Palindrome
	0141(e): Linked List Cycle
	0142(m): Linked List Cycle II
	0143(m): Reorder List
	0148(m): Sort List
	0202(e): Happy Number
	0209(m): Minimum Size Subarray Sum
	0234(e): Palindrome Linked List
	0239(h): Sliding Window Maximum
	0243(e): Shortest Word Distance
	0244(m): Shortest Word Distance II
	0245(m): Shortest Word Distance III
	0246(e): Strobogrammatic Number
	0253(m): Meeting Rooms II
	0263(e): Ugly Number
	0264(m): Ugly Number II
	0287(m): Find the Duplicate Number
	0313(m): Super Ugly Number
	0340(h): Longest Substring with At Most K Distinct Characters
	0345(e): Reverse Vowels of a String
	0349(e): Intersection of Two Arrays
	0350(e): Intersection of Two Arrays II
	0392(e): Is Subsequence
	0395(m): Longest Substring with At Least K Repeating Characters
	0424(m): Longest Repeating Character Replacement
	0438(m): Find All Anagrams in a String
	0455(e): Assign Cookies
	0567(m): Permutation in String 
	0594(e): Longest Harmonious Subsequence
	0611(m): Valid Triangle Number
	0622(m): Design Circular Queue
	0641(m): Design Circular Deque
	0643(e): Maximum Average Subarray I
	0713(m): Subarray Product Less Than K
	0763(m): Partition Labels
	0769(m): Max Chunks To Make Sorted
	0809(m): Expressive Words
	0844(e): Backspace String Compare
	0876(e): Middle of the Linked List
	0881(m): Boats to Save People 
	0917(e): Reverse Only Letters
	0922(e): Sort Array By Parity II
	0925(e): Long Pressed Name
	0953(e): Verifying an Alien Dictionary
	0977(e): Squares of a Sorted Array
	0992(h): Subarrays with K Different Integers
	1004(m): Max Consecutive Ones III
	1052(m): Grumpy Bookstore Owner
	1089(e): Duplicate Zeros
	1099(e): Two Sum Less Than K
	1100(m): Find K-Length Substrings With No Repeated Characters
	1176(e): Diet Plan Performance
	1213(e): Intersection of Three Sorted Arrays
	1214(m): Two Sum BSTs

--- Quick Select:
	0215(m): Kth Largest Element in an Array
	0378(m): Kth Smallest Element in a Sorted Matrix
	0973(m): K Closest Points to Origin

--- Priority Queue:
	0215(m): Kth Largest Element in an Array
	0295(h): Find Median from Data Stream
	0347(m): Top K Frequent Elements
	0373(m): Find K Pairs with Smallest Sums
	0378(m): Kth Smallest Element in a Sorted Matrix
	0451(m): Sort Characters By Frequency
	0692(m): Top K Frequent Words
	0703(e): Kth Largest Element in a Stream
	0973(m): K Closest Points to Origin
	1046(e): Last Stone Weight
	1090(m): Largest Values From Labels
	1102(m): Path With Maximum Minimum Value
	1167(m): Minimum Cost to Connect Sticks
	1317(e): The K Weakest Rows in a Matrix
	1337(e): The K Weakest Rows in a Matrix
	1338(m): Reduce Array Size to The Half
	1353(m): Maximum Number of Events That Can Be Attended

--- Bucket Sort:
	0347(m): Top K Frequent Elements
	0387(e): First Unique Character in a String
	0451(m): Sort Characters By Frequency
	0539(m): Minimum Time Difference
	0692(m): Top K Frequent Words
	1057(m): Campus Bikes
	1196(e): How Many Apples Can You Put into the Basket
	1122(e): Relative Sort Array
	1133(e): Largest Unique Number
	1170(e): Compare Strings by Frequency of the Smallest Character
	1189(e): Maximum Number of Balloons
	1200(e): Minimum Absolute Difference
	1337(e): The K Weakest Rows in a Matrix
	1338(m): Reduce Array Size to The Half
	1365(e): How Many Numbers Are Smaller Than the Current Number
	1394(e): Find Lucky Integer in an Array
	1403(e): Minimum Subsequence in Non-Increasing Order
	1433(m): Check If a String Can Break Another String
	1460(e): Make Two Arrays Equal by Reversing Sub-arrays

--- Union Find:
	0261(m): Graph Valid Tree
	0305(h): Number of Islands II
	0399(m): Evaluate Division
	0684(m): Redundant Connection
	0721(m): Accounts Merge 
	0734(e): Sentence Similarity
	0737(m): Sentence Similarity II
	0765(h): Couples Holding Hands
	0685(h): Redundant Connection II
	0947(m): Most Stones Removed with Same Row or Column 
	0959(m): Regions Cut By Slashes
	1061(m): Lexicographically Smallest Equivalent String
	1101(m): The Earliest Moment When Everyone Become Friends
	1202(m): Smallest String With Swaps 
	1135(m): Connecting Cities With Minimum Cost
	1319(m): Number of Operations to Make Network Connected

--- Stack:
	0020(m): Valid Parentheses 
	0084(h): Largest Rectangle in Histogram
	0105(m): Construct Binary Tree from Preorder and Inorder Traversal
	0150(m): Evaluate Reverse Polish Notation
	0155(e): Min Stack
	0225(e): Implement Stack using Queues
	0227(m): Basic Calculator II
	0232(e): Implement Queue using Stacks
	0341(m): Flatten Nested List Iterator
	0402(m): Remove K Digits
	0430(m): Flatten a Multilevel Doubly Linked List
	0445(m): Add Two Numbers II
	0456(m): 132 Pattern
	0496(e): Next Greater Element I
	0503(m): Next Greater Element II
	0636(m): Exclusive Time of Functions 
	0654(m): Maximum Binary Tree
	0739(m): Daily Temperatures
	0768(h): Max Chunks To Make Sorted II
	0889(m): Construct Binary Tree from Preorder and Postorder Traversal
	0901(m): Online Stock Span
	0907(m): Sum of Subarray Minimums
	1003(m): Check If Word Is Valid After Substitutions
	1008(m): Construct Binary Search Tree from Preorder Traversal
	1019(m): Next Greater Node In Linked List
	1021(e): Remove Outermost Parentheses
	1028(h): Recover a Tree From Preorder Traversal
	1043(e): Remove All Adjacent Duplicates In String
	1130(m): Minimum Cost Tree From Leaf Values
	1209(m): Remove All Adjacent Duplicates in String II
	1249(m): Minimum Remove to Make Valid Parentheses
	1305(m): All Elements in Two Binary Search Trees

--- Queue:
	0100(e): Same Tree
	0101(e): Symmetric Tree
	0102(m): Binary Tree Level Order Traversal 
	0103(m): Binary Tree Zigzag Level Order Traversal
	0127(m): Word Ladder
	0199(m): Binary Tree Right Side View
	0200(m): Number of Islands
	0207(m): Course Schedule
	0210(m): Course Schedule II
	0239(h): Sliding Window Maximum
	0261(m): Graph Valid Tree
	0286(m): Walls and Gates
	0301(h): Remove Invalid Parentheses
	0310(m): Minimum Height Trees
	0314(m): Binary Tree Vertical Order Traversal
	0362(m): Design Hit Counter
	0417(m): Pacific Atlantic Water Flow
	0490(m): The Maze
	0505(m): The Maze II
	0513(m): Find Bottom Left Tree Value
	0515(m): Find Largest Value in Each Tree Row
	0622(m): Design Circular Queue
	0641(m): Design Circular Deque
	0637(e): Average of Levels in Binary Tree
	0662(m): Maximum Width of Binary Tree
	0684(m): Redundant Connection
	0690(e): Employee Importance
	0695(m): Max Area of Island
	0721(m): Accounts Merge 
	0742(m): Closest Leaf in a Binary Tree
	0743(m): Network Delay Time
	0752(m): Open the Lock
	0785(m): Is Graph Bipartite?
	0919(m): Complete Binary Tree Inserter
	0934(m): Shortest Bridge
	0958(m): Check Completeness of a Binary Tree
	0994(e): Rotting Oranges
	1059(m): All Paths from Source Lead to Destination
	1129(m): Shortest Path with Alternating Colors 
	1161(m): Maximum Level Sum of a Binary Tree
	1162(m): As Far from Land as Possible
	1245(m): Tree Diameter
	1302(m): Deepest Leaves Sum
	1311(m): Get Watched Videos by Your Friends
	1391(m): Check if There is a Valid Path in a Grid
	1466(m): Reorder Routes to Make All Paths Lead to the City Zero

--- Recursion:
	0017(m): Letter Combinations of a Phone Number
	0022(m): Generate Parentheses
	0079(m): Word Search
	0131(m): Palindrome Partitioning
	0234(e): Palindrome Linked List
	0247(m): Strobogrammatic Number II
	0248(h): Strobogrammatic Number III
	0301(h): Remove Invalid Parentheses
	0337(m): House Robber III
	0341(m): Flatten Nested List Iterator
	0364(m): Nested List Weight Sum II
	0386(m): Lexicographical Numbers
	0394(m): Decode String
	0395(m): Longest Substring with At Least K Repeating Characters
	0397(m): Integer Replacement
	0399(m): Evaluate Division
	0431(h): Encode N-ary Tree to Binary Tree
	0445(m): Add Two Numbers II
	0494(m): Target Sum
	0509(m): Fibonacci Number
	0536(m): Construct Binary Tree from String
	0547(m): Friend Circles
	0638(m): Shopping Offers
	0650(m): 2 Keys Keyboard
	0756(m): Pyramid Transition Matrix
	0784(e): Letter Case Permutation
	0802(m): Find Eventual Safe States
	0841(m): Keys and Rooms
	1236(m): Web Crawler
	1414(m): Find the Minimum Number of Fibonacci Numbers Whose Sum Is K
	1666(m): Change the Root of a Binary Tree

--- Dynamic Programming:
	0005(m): Longest Palindromic Substring
	0045(h): Jump Game II
	0055(m): Jump Game
	0070(m): Climbing Stairs
	0091(m): Decode Ways
	0085(h): Maximal Rectangle
	0118(e): Pascal's Triangle
	0119(e): Pascal's Triangle II
	0120(m): Triangle
	0121(e): Best Time to Buy and Sell Stock
	0122(e): Best Time to Buy and Sell Stock II
	0131(m): Palindrome Partitioning
	0134(m): Gas Station
	0139(m): Word Break
	0140(h): Word Break II
	0152(m): Maximum Product Subarray
	0198(e): House Robber
	0213(m): House Robber II
	0221(m): Maximal Square
	0238(m): Product of Array Except Self
	0241(m): Different Ways to Add Parentheses
	0256(e): Paint House
	0276(e): Paint Fence
	0279(m): Perfect Squares
	0303(e): Range Sum Query - Immutable
	0309(m): Best Time to Buy and Sell Stock with Cooldown
	0322(m): Coin Change
	0337(m): House Robber III
	0338(m): Counting Bits
	0343(m): Integer Break
	0368(m): Largest Divisible Subset
	0375(m): Guess Number Higher or Lower II
	0376(m): Wiggle Subsequence
	0410(h): Split Array Largest Sum
	0416(m): Partition Equal Subset Sum
	0459(e): Repeated Substring Pattern
	0472(h): Concatenated Words
	0474(m): Ones and Zeroes
	0486(m): Predict the Winner
	0494(m): Target Sum
	0516(m): Longest Palindromic Subsequence
	0518(m): Coin Change 2
	0542(m): 01 Matrix
	0581(e): Shortest Unsorted Continuous Subarray
	0583(m): Delete Operation for Two Strings
	0638(m): Shopping Offers
	0647(m): Palindromic Substrings
	0650(m): 2 Keys Keyboard
	0659(m): Split Array into Consecutive Subsequences
	0673(m): Number of Longest Increasing Subsequence
	0714(m): Best Time to Buy and Sell Stock with Transaction Fee 
	0718(m): Maximum Length of Repeated Subarray
	0740(m): Delete and Earn
	0746(e): Min Cost Climbing Stairs
	0769(m): Max Chunks To Make Sorted
	0801(m): Minimum Swaps To Make Sequences Increasing
	0823(m): Binary Trees With Factors
	0861(m): Score After Flipping Matrix
	0896(e): Monotonic Array
	0915(m): Partition Array into Disjoint Intervals
	0926(m): Flip String to Monotone Increasing
	0931(m): Minimum Falling Path Sum
	0983(m): Minimum Cost For Tickets
	1035(m): Uncrossed Lines
	1043(m): Partition Array for Maximum Sum
	1048(m): Longest String Chain
	1049(m): Last Stone Weight II
	1105(m): Filling Bookcase Shelves
	1140(m): Stone Game II
	1143(m): Longest Common Subsequence
	1155(m): Number of Dice Rolls With Target Sum
	1277(m): Count Square Submatrices with All Ones
	1292(m): Maximum Side Length of a Square with Sum Less than or Equal to Threshold
	1314(m): Matrix Block Sum

--- Subarray, Subsequences:
	0053(e): Maximum Subarray
	0152(m): Maximum Product Subarray
	0209(m): Minimum Size Subarray Sum
	0300(m): Longest Increasing Subsequence
	0334(m): Increasing Triplet Subsequence
	0392(e): Is Subsequence
	0491(m): Increasing Subsequences
	0523(m): Continuous Subarray Sum
	0560(m): Subarray Sum Equals K
	0594(e): Longest Harmonious Subsequence
	0643(e): Maximum Average Subarray I
	0671(e): Second Minimum Node In a Binary Tree
	0673(m): Number of Longest Increasing Subsequence
	0674(e): Longest Continuous Increasing Subsequence
	0713(m): Subarray Product Less Than K
	0792(m): Number of Matching Subsequences
	1048(m): Longest String Chain
	1186(m): Maximum Subarray Sum with One Deletion

--- Prefix Sum:
	0327(h): Count of Range Sum
	0437(e): Path Sum III
	0497(m): Random Point in Non-overlapping Rectangles
	0523(m): Continuous Subarray Sum
	0525(m): Contiguous Array
	0560(m): Subarray Sum Equals K
	0974(m): Subarray Sums Divisible by K
	1010(e): Pairs of Songs With Total Durations Divisible by 60
	1171(m): Remove Zero Sum Consecutive Nodes from Linked List
	1292(m): Maximum Side Length of a Square with Sum Less than or Equal to Threshold
	1314(m): Matrix Block Sum
	1512(m): Number of Good Pairs

--- Map:
	0001(e): Two Sum
	0036(m): Valid Sudoku
	0049(m): Group Anagrams
	0126(h): Word Ladder II
	0127(m): Word Ladder
	0128(h): Longest Consecutive Sequence
	0133(m): Clone Graph
	0146(h): LRU Cache
	0190(e): Reverse Bits
	0191(e): Number of 1 Bits
	0205(e): Isomorphic Strings
	0217(e): Contains Duplicate
	0249(m): Group Shifted Strings
	0290(e): Word Pattern
	0314(m): Binary Tree Vertical Order Traversal
	0349(e): Intersection of Two Arrays
	0350(e): Intersection of Two Arrays II
	0380(m): Insert Delete GetRandom O(1)
	0383(e): Ransom Note
	0414(e): Third Maximum Number
	0451(m): 4Sum II
	0489(h): Robot Room Cleaner
	0532(e): K-diff Pairs in an Array
	0594(e): Longest Harmonious Subsequence
	0599(e): Minimum Index Sum of Two Lists
	0652(m): Find Duplicate Subtrees
	0653(e): Two Sum IV - Input is a BST
	0697(e): Degree of an Array
	0740(m): Delete and Earn
	0819(e): Most Common Word
	0888(e): Fair Candy Swap
	0890(m): Find and Replace Pattern
	0939(m): Minimum Area Rectangle
	0987(m): Vertical Order Traversal of a Binary Tree
	1122(e): Relative Sort Array
	1128(e): Number of Equivalent Domino Pairs
	1146(m): Snapshot Array
	1152(m): Analyze User Website Visit Pattern
	1169(m): Invalid Transactions
	1244(m): Design A Leaderboard
	1396(m): Design Underground System
	1660(m): Correct a Binary Tree
	1666(m): Change the Root of a Binary Tree
	1676(m): Lowest Common Ancestor of a Binary Tree IV

--- Design:
	0146(m): LRU Cache
	0362(m): Design Hit Counter
	0621(m): Task Scheduler
	0622(m): Design Circular Queue
	0641(m): Design Circular Deque
	0705(e): Design HashSet
	0706(e): Design HashMap
	0767(m): Reorganize String
	1114(e): Print in Order
	1188(m): Design Bounded Blocking Queue
	1279(e): Traffic Light Controlled Intersection

--- Linked List:
	0002(m): Add Two Numbers 
	0019(m): Remove Nth Node From End of List
	0021(e): Merge Two Sorted Lists
	0023(h): Merge k Sorted Lists
	0024(m): Swap Nodes in Pairs
	0025(h): Reverse Nodes in k-Group
	0061(m): Rotate List 
	0082(m): Remove Duplicates from Sorted List II
	0083(e): Remove Duplicates from Sorted List 
	0086(m): Partition List
	0092(m): Reverse Linked List II
	0114(m): Flatten Binary Tree to Linked List 
	0116(m): Populating Next Right Pointers in Each Node
	0117(m): Populating Next Right Pointers in Each Node II
	0138(m): Copy List with Random Pointer
	0142(m): Linked List Cycle II
	0143(m): Reorder List
	0147(m): Insertion Sort List
	0148(m): Sort List
	0160(e): Intersection of Two Linked Lists
	0203(e): Remove Linked List Elements
	0206(e): Reverse Linked List
	0328(m): Odd Even Linked List
	0339(e): Nested List Weight Sum
	0369(m): Plus One Linked List
	0426(m): Convert Binary Search Tree to Sorted Doubly Linked List
	0430(m): Flatten a Multilevel Doubly Linked List
	0445(m): Add Two Numbers II
	0725(m): Split Linked List in Parts
	0817(m): Linked List Components
	1019(m): Next Greater Node In Linked Lis
	1171(m): Remove Zero Sum Consecutive Nodes from Linked List

--- Duplicate:
	0217(e): Contains Duplicate
	0219(e): Contains Duplicate II
	0287(m): Find the Duplicate Number
	0442(m): Find All Duplicates in an Array
	0448(e): Find All Numbers Disappeared in an Array
	0645(e): Set Mismatch

--- Palindrome:
	0005(m): Longest Palindromic Substring 
	0009(e): Palindrome Number 
	0125(e): Valid Palindrome
	0131(m): Palindrome Partitioning
	0234(e): Palindrome Linked List
	0409(e): Longest Palindrome
	0516(m): Longest Palindromic Subsequence
	0647(m): Palindromic Substrings
	0680(e): Valid Palindrome II

--- Array Operations:
	0004(h): Median of Two Sorted Arrays
	0006(m): ZigZag Conversion
	0008(m): String to Integer (atoi)
	0014(m): Longest Common Prefix
	0015(m): 3Sum
	0016(m): 3Sum Closest
	0018(m): 4Sum
	0026(e): Remove Duplicates from Sorted Array
	0027(e): Remove Element
	0028(e): Implement strStr()
	0035(m): Search Insert Position
	0041(h): First Missing Positive
	0048(m): Rotate Image
	0054(m): Spiral Matrix
	0058(e): Length of Last Word
	0059(m): Spiral Matrix II
	0073(m): Set Matrix Zeroes
	0074(m): Search a 2D Matrix
	0075(m): Sort Colors
	0081(m): Search in Rotated Sorted Array II
	0169(e): Majority Element
	0189(e): Rotate Array
	0228(m): Summary Ranges
	0229(m): Majority Element II
	0238(m): Product of Array Except Self
	0240(m): Search a 2D Matrix II
	0242(e): Valid Anagram
	0280(m): Wiggle Sort
	0283(e): Move Zeroes
	0289(m): Game of Life
	0344(e): Reverse String
	0348(m): Design Tic-Tac-Toe
	0406(m): Queue Reconstruction by Height
	0412(e): Fizz Buzz
	0414(e): Third Maximum Number
	0453(e): Minimum Moves to Equal Array Elements
	0477(m): Total Hamming Distance
	0485(e): Max Consecutive Ones
	0506(e): Relative Ranks
	0531(m): Lonely Pixel I
	0541(e): Reverse String II
	0557(e): Reverse Words in a String III
	0561(e): Array Partition I
	0565(m): Array Nesting
	0566(e): Reshape the Matrix
	0575(e): Distribute Candies
	0598(e): Range Addition II
	0605(e): Can Place Flowers
	0624(e): Maximum Distance in Arrays 
	0657(e): Robot Return to Origin
	0661(e): Image Smoother
	0665(e): Non-decreasing Array
	0709(e): To Lower Case
	0717(e): 1-bit and 2-bit Characters
	0723(m): Candy Crush
	0724(e): Find Pivot Index
	0738(m): Monotone Increasing Digits
	0747(e): Largest Number At Least Twice of Others
	0766(e): Toeplitz Matrix
	0796(e): Rotate String
	0807(m): Max Increase to Keep City Skyline
	0830(e): Positions of Large Groups
	0832(e): Flipping an Image
	0840(e): Magic Squares In Grid
	0848(m): Shifting Letters
	0849(e): Maximize Distance to Closest Person
	0856(m): Score of Parentheses
	0860(e): Lemonade Change
	0867(e): Transpose Matrix
	0885(m): Spiral Matrix III
	0905(e): Sort Array By Parity
	0912(m): Sort an Array
	0921(m): Minimum Add to Make Parentheses Valid
	0937(e): Reorder Data in Log Files
	0941(e): Valid Mountain Array
	0944(e): Delete Columns to Make Sorted
	0950(m): Reveal Cards In Increasing Order
	0957(m): Prison Cells After N Days
	0969(m): Pancake Sorting
	0978(m): Longest Turbulent Subarray
	0985(e): Sum of Even Numbers After Queries
	0989(e): Add to Array-Form of Integer
	1002(e): Find Common Characters
	1005(e): Maximize Sum Of Array After K Negations
	1013(e): Partition Array Into Three Parts With Equal Sum
	1025(e): Divisor Game
	1029(e): Two City Scheduling
	1051(e): Height Checker
	1071(e): Greatest Common Divisor of Strings
	1085(e): Sum of Digits in the Minimum Number
	1086(e): High Five 
	1111(m): Maximum Nesting Depth of Two Valid Parentheses Strings
	1119(e): Remove Vowels from a String
	1160(e): Find Words That Can Be Formed by Characters
	1184(e): Distance Between Bus Stops
	1217(e): Play with Chips
	1221(e): Split a String in Balanced Strings
	1243(e): Array Transformation
	1247(m): Minimum Swaps to Make Strings Equal
	1252(e): Cells with Odd Values in a Matrix
	1260(e): Shift 2D Grid
	1266(e): Minimum Time Visiting All Points
	1275(e): Find Winner on a Tic Tac Toe Game
	1282(m): Group the People Given the Group Size They Belong To
	1287(e): Element Appearing More Than 25% In Sorted Array
	1295(e): Find Numbers with Even Number of Digits
	1299(e): Replace Elements with Greatest Element on Right Side
	1304(e): Find N Unique Integers Sum up to Zero
	1313(e): Decompress Run-Length Encoded List
	1331(e): Rank Transform of an Array
	1346(e): Check If N and Its Double Exist
	1351(e): Count Negative Numbers in a Sorted Matrix
	1380(e): Lucky Numbers in a Matrix 
	1385(e): Find the Distance Value Between Two Arrays
	1395(m): Count Number of Teams
	1399(e): Count Largest Group
	1413(e): Minimum Value to Get Positive Step by Step Sum
	1427(e): Perform String Shifts
	1431(e): Kids With the Greatest Number of Candies
	1441(e): Build an Array With Stack Operations
	1480(e): Running Sum of 1d Array
	1464(e): Maximum Product of Two Elements in an Array
	1507(e): Reformat Date

--- Bit Operations
	0067(e): Add Binary 
	0136(e): Single Number
	0137(m): Single Number II
	0260(m): Single Number III
	0268(m): Missing Number
	0338(m): Counting Bits
	0389(e): Find the Difference
	0461(e): Hamming Distance
	0476(e): Number Complement
	1048(m): Longest String Chain
	1072(m): Flip Columns For Maximum Number of Equal Rows
	1018(e): Binary Prefix Divisible By 5
	1118(e): Number of Days in a Month
	1128(e): Number of Equivalent Domino Pairs
	1460(e): Make Two Arrays Equal by Reversing Sub-arrays

--- Intervals:
	0056(m): Merge Intervals
	0057(h): Insert Interval
	0252(e): Meeting Rooms
	0435(m): Non-overlapping Intervals
	0452(m): Minimum Number of Arrows to Burst Balloons
	0646(m): Maximum Length of Pair Chain
	0986(m): Interval List Intersections
	1272(m): Remove Interval
	1450(e): Number of Students Doing Homework at a Given Time

--- Graph:
	0062(m): Unique Paths
	0063(m): Unique Paths II
	0064(m): Minimum Path Sum 
	0085(h): Maximal Rectangle
	0112(e): Path Sum
	0113(m): Path Sum II
	0126(h): Word Ladder II
	0127(m): Word Ladder
	0130(m): Surrounded Regions
	0133(m): Clone Graph
	0200(m): Number of Islands
	0207(m): Course Schedule
	0210(m): Course Schedule II
	0212(h): Word Search II
	0221(m): Maximal Square
	0277(m): Find the Celebrity
	0286(m): Walls and Gates
	0310(m): Minimum Height Trees
	0323(m): Number of Connected Components in an Undirected Graph
	0417(m): Pacific Atlantic Water Flow
	0419(m): Battleships in a Board
	0463(e): Island Perimeter
	0489(h): Robot Room Cleaner
	0490(m): The Maze
	0498(m): Diagonal Traverse
	0505(m): The Maze II
	0529(m): Minesweeper
	0684(m): Redundant Connection
	0694(m): Number of Distinct Islands
	0695(m): Max Area of Island
	0733(e): Flood Fill
	0743(m): Network Delay Time
	0752(m): Open the Lock
	0785(m): Is Graph Bipartite?
	0797(m): All Paths From Source to Target
	0802(m): Find Eventual Safe States
	0863(m): All Nodes Distance K in Binary Tree
	0934(m): Shortest Bridge
	0947(m): Most Stones Removed with Same Row or Column 
	0959(m): Regions Cut By Slashes
	0980(h): Unique Paths III
	0994(e): Rotting Oranges
	0997(e): Find the Town Judge
	0999(e): Available Captures for Rook
	1034(m): Coloring A Border
	1059(m): All Paths from Source Lead to Destination
	1102(m): Path With Maximum Minimum Value
	1129(m): Shortest Path with Alternating Colors 
	1135(m): Connecting Cities With Minimum Cost
	1162(m): As Far from Land as Possible
	1192(h): Critical Connections in a Network
	1219(m): Path with Maximum Gold
	1254(m): Number of Closed Islands
	1311(m): Get Watched Videos by Your Friends
	1391(m): Check if There is a Valid Path in a Grid
	1466(m): Reorder Routes to Make All Paths Lead to the City Zero

--- Tree:
	0094(m): Binary Tree Inorder Traversal
	0095(m): Unique Binary Search Trees II
	0096(m): Unique Binary Search Trees
	0098(m): Validate Binary Search Tree
	0099(h): Recover Binary Search Tree
	0100(e): Same Tree
	0101(e): Symmetric Tree
	0102(m): Binary Tree Level Order Traversal 
	0103(m): Binary Tree Zigzag Level Order Traversal
	0104(e): Maximum Depth of Binary Tree
	0105(m): Construct Binary Tree from Preorder and Inorder Traversal
	0106(m): Construct Binary Tree from Inorder and Postorder Traversal 
	0107(e): Binary Tree Level Order Traversal II
	0108(e): Convert Sorted Array to Binary Search Tree
	0109(m): Convert Sorted List to Binary Search Tree
	0110(e): Balanced Binary Tree
	0111(e): Minimum Depth of Binary Tree
	0114(m): Flatten Binary Tree to Linked List 
	0116(m): Populating Next Right Pointers in Each Node
	0117(m): Populating Next Right Pointers in Each Node II
	0124(h): Binary Tree Maximum Path Sum
	0129(m): Sum Root to Leaf Numbers
	0144(m): Binary Tree Preorder Traversal
	0145(h): Binary Tree Postorder Traversal
	0156(m): Binary Tree Upside Down
	0173(m): Binary Search Tree Iterator
	0199(m): Binary Tree Right Side View
	0208(m): Implement Trie (Prefix Tree)
	0212(h): Word Search II
	0222(m): Count Complete Tree Nodes
	0226(e): Invert Binary Tree
	0230(m): Kth Smallest Element in a BST
	0235(e): Lowest Common Ancestor of a Binary Search Tree
	0236(m): Lowest Common Ancestor of a Binary Tree
	0237(e): Delete Node in a Linked List
	0255(m): Verify Preorder Sequence in Binary Search Tree
	0257(e): Binary Tree Paths
	0270(e): Closest Binary Search Tree Value
	0285(m): Inorder Successor in BST 
	0297(h): Serialize and Deserialize Binary Tree
	0298(m): Binary Tree Longest Consecutive Sequence
	0307(m): Range Sum Query - Mutable
	0314(m): Binary Tree Vertical Order Traversal
	0331(m): Verify Preorder Serialization of a Binary Tree
	0333(m): Largest BST Subtree
	0366(m): Find Leaves of Binary Tree
	0404(e): Sum of Left Leaves
	0428(h): Serialize and Deserialize N-ary Tree
	0429(m): N-ary Tree Level Order Traversal
	0431(h): Encode N-ary Tree to Binary Tree
	0437(e): Path Sum III
	0449(m): Serialize and Deserialize BST
	0450(m): Delete Node in a BST
	0501(e): Find Mode in Binary Search Tree
	0510(m): Inorder Successor in BST II
	0513(m): Find Bottom Left Tree Value
	0515(m): Find Largest Value in Each Tree Row
	0530(e): Minimum Absolute Difference in BST
	0536(m): Construct Binary Tree from String
	0538(e): Convert BST to Greater Tree
	0543(e): Diameter of Binary Tree
	0545(m): Boundary of Binary Tree
	0549(m): Binary Tree Longest Consecutive Sequence II
	0559(e): Maximum Depth of N-ary Tree
	0563(e): Binary Tree Tilt
	0582(m): Kill Process
	0589(e): N-ary Tree Preorder Traversal
	0590(e): N-ary Tree Postorder Traversal
	0606(e): Construct String from Binary Tree
	0617(e): Merge Two Binary Trees
	0623(m): Add One Row to Tree
	0637(e): Average of Levels in Binary Tree
	0648(m): Replace Words
	0653(e): Two Sum IV - Input is a BST
	0654(m): Maximum Binary Tree
	0655(m): Print Binary Tree
	0662(m): Maximum Width of Binary Tree
	0663(m): Equal Tree Partition
	0669(e): Trim a Binary Search Tree
	0671(e): Second Minimum Node In a Binary Tree
	0687(e): Longest Univalue Path
	0700(e): Search in a Binary Search Tree
	0701(m): Insert into a Binary Search Tree
	0742(m): Closest Leaf in a Binary Tree
	0776(m): Split BST
	0783(e): Minimum Distance Between BST Nodes
	0809(m): Expressive Words
	0814(m): Binary Tree Pruning
	0863(m): All Nodes Distance K in Binary Tree
	0865(m): Smallest Subtree with all the Deepest Nodes
	0872(e): Leaf-Similar Trees
	0889(m): Construct Binary Tree from Preorder and Postorder Traversal
	0894(m): All Possible Full Binary Trees
	0896(e): Increasing Order Search Tree
	0919(m): Complete Binary Tree Inserter
	0938(e): Range Sum of BST
	0951(m): Flip Equivalent Binary Trees
	0958(m): Check Completeness of a Binary Tree
	0965(e): Univalued Binary Tree
	0971(m): Flip Binary Tree To Match Preorder Traversal
	0979(m): Distribute Coins in Binary Tree
	0987(m): Vertical Order Traversal of a Binary Tree
	0988(m): Smallest String Starting From Leaf
	0993(e): Cousins in Binary Tree
	0998(m): Maximum Binary Tree II
	1008(m): Construct Binary Search Tree from Preorder Traversal
	1022(e): Sum of Root To Leaf Binary Numbers
	1026(m): Maximum Difference Between Node and Ancestor
	1028(h): Recover a Tree From Preorder Traversal
	1038(m): Binary Search Tree to Greater Sum Tree
	1080(m): Insufficient Nodes in Root to Leaf Paths
	1104(m): Path In Zigzag Labelled Binary Tree
	1110(m): Delete Nodes And Return Forest
	1120(m): Maximum Average Subtree
	1123(m): Lowest Common Ancestor of Deepest Leaves
	1130(m): Minimum Cost Tree From Leaf Values
	1145(m): Binary Tree Coloring Game
	1161(m): Maximum Level Sum of a Binary Tree
	1214(m): Two Sum BSTs
	1257(m): Smallest Common Region
	1261(m): Find Elements in a Contaminated Binary Tree
	1273(m): Delete Tree Nodes
	1302(m): Deepest Leaves Sum
	1305(m): All Elements in Two Binary Search Trees
	1315(m): Sum of Nodes with Even-Valued Grandparent
	1325(m): Delete Leaves With a Given Value
	1339(m): Maximum Product of Splitted Binary Tree
	1367(m): Linked List in Binary Tree
	1372(m): Longest ZigZag Path in a Binary Tree
	1379(m): Find a Corresponding Node of a Binary Tree in a Clone of That Tree
	1409(m): Queries on a Permutation With Key
	1430(m): Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree
	1443(m): Minimum Time to Collect All Apples in a Tree
	1448(m): Count Good Nodes in Binary Tree
	1469(e): Find All The Lonely Nodes
	1490(m): Clone N-ary Tree
	1609(m): Even Odd Tree
	1612(m): Check If Two Expression Trees are Equivalent
	1660(m): Correct a Binary Tree
	1676(m): Lowest Common Ancestor of a Binary Tree IV

--- Subtree:
	0250(m): Count Univalue Subtrees
	0508(m): Most Frequent Subtree Sum
	0572(e): Subtree of Another Tree
	0652(m): Find Duplicate Subtrees

--- Permutations or Combinations:
	0031(m): Next Permutation
	0039(m): Combination Sum
	0040(m): Combination Sum II
	0046(m): Permutations
	0047(m): Permutations II
	0060(h): Permutation Sequence
	0077(m): Combinations
	0078(m): Subsets
	0090(m): Subsets II
	0216(m): Combination Sum III
	0491(m): Increasing Subsequences
	1079(m): Letter Tile Possibilities
	1087(m): Brace Expansion

--- Math:
	0007(e): Reverse Integer
	0012(m): Integer to Roman
	0013(e): Roman to Integer
	0029(m): Divide Two Integers
	0038(e): Count and Say
	0043(m): Multiply Strings
	0050(m): Pow(x, n)
	0066(e): Plus One
	0069(e): Sqrt(x)
	0168(e): Excel Sheet Column Title
	0171(e): Excel Sheet Column Number
	0172(e): Factorial Trailing Zeroes
	0202(e): Happy Number
	0204(e): Count Primes
	0231(e): Power of Two
	0258(e): Add Digits
	0311(m): Sparse Matrix Multiplication 
	0415(e): Add Strings
	0463(e): Island Perimeter
	0507(e): Perfect Number
	0537(m): Complex Number Multiplication
	0628(e): Maximum Product of Three Numbers
	0724(e): Find Pivot Index
	0754(m): Reach a Number
	0914(e): X of a Kind in a Deck of Cards
	0991(m): Broken Calculator
	1037(e): Valid Boomerang
	1128(e): Number of Equivalent Domino Pairs
	1227(m): Airplane Seat Assignment Probability
	1232(e): Check If It Is a Straight Line
	1304(e); Find N Unique Integers Sum up to Zero

--- Resivoir Sampling:
	0382(m): Linked List Random Node
	0384(m): Shuffle an Array
	0398(m): Random Pick Index
	0497(m): Random Point in Non-overlapping Rectangles

